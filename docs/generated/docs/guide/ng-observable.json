{
  "id": "guide/ng-observable",
  "title": "NgObservable",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/zodiac-team/zodiac-ui/edit/master/apps/docs/content/guide/ng-observable.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngobservable\">NgObservable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ng-observable#ngobservable\"><i class=\"material-icons\">link</i></a></h1>\n<p>Create powerful reactive components with Angular.</p>\n<ul>\n<li>🚀 Observe lifecycle hooks such as <code><a href=\"api/ng-observable/operators/ngOnInit\" class=\"code-anchor\">ngOnInit</a></code>, <code><a href=\"api/ng-observable/operators/ngOnChanges\" class=\"code-anchor\">ngOnChanges</a></code></li>\n<li>🎉 Convert <code>HostListener</code> and template events into observable streams</li>\n<li>✈️ Manage and observe state changes in your components and directives</li>\n<li>☑️ Unlock blazing performance with zoneless, observable change detection</li>\n<li>💥 Use <code>@Decorators</code> for all of the builtin lifecycle hooks</li>\n<li>🍷 Derive computed values with the <code>@<a href=\"api/ng-observable/Computed\" class=\"code-anchor\">Computed</a></code> decorator</li>\n<li>🚫 Escape async hell and redundant placeholder variables</li>\n<li>🚮 Automatically clean up subscriptions with <code><a href=\"api/ng-observable/Stream\" class=\"code-anchor\">Stream</a></code></li>\n<li>🎈 Get strongly typed changes with <code><a href=\"api/ng-observable/TypedChanges\" class=\"code-anchor\">TypedChanges</a>&#x3C;T></code></li>\n<li>👉 Extract implementation details into pure reactive functions</li>\n</ul>\n<h2 id=\"setup\">Setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ng-observable#setup\"><i class=\"material-icons\">link</i></a></h2>\n<code-example language=\"bash\">\nnpm install @zodiac-ui/ng-observable\n</code-example>\n<h3 id=\"configure-state-optional\">Configure <code><a href=\"api/ng-observable/State\" class=\"code-anchor\">State</a></code> (optional)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ng-observable#configure-state-optional\"><i class=\"material-icons\">link</i></a></h3>\n<p>To get started with <code><a href=\"api/ng-observable/State\" class=\"code-anchor\">State</a></code>, some additional configuration is needed.</p>\n<p>The <code><a href=\"api/ng-observable/State\" class=\"code-anchor\">State</a></code> utility provides its own change detection strategy that does not depend on zones. How this differs from\nnormal change detection is illustrated below.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Zones</th>\n<th><code>Microtask</code></th>\n<th><code>Macrotask</code></th>\n<th><code>(event)</code></th>\n<th><code>@Input()</code></th>\n<th><code><a href=\"api/ng-observable/State#next\" class=\"code-anchor\">next</a>()</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Default</code></td>\n<td>Yes</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td></td>\n</tr>\n<tr>\n<td><code>OnPush</code></td>\n<td>Yes</td>\n<td></td>\n<td></td>\n<td>✅</td>\n<td>✅</td>\n<td></td>\n</tr>\n<tr>\n<td><code>OnPush</code></td>\n<td>No</td>\n<td></td>\n<td></td>\n<td></td>\n<td>✅</td>\n<td></td>\n</tr>\n<tr>\n<td><code><a href=\"api/ng-observable/StateChangeStrategy#REATTACH\" class=\"code-anchor\">REATTACH</a></code></td>\n<td>Yes</td>\n<td></td>\n<td></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code><a href=\"api/ng-observable/StateChangeStrategy#REATTACH\" class=\"code-anchor\">REATTACH</a></code></td>\n<td>No</td>\n<td></td>\n<td></td>\n<td></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code><a href=\"api/ng-observable/StateChangeStrategy#DETACH\" class=\"code-anchor\">DETACH</a></code></td>\n<td>N/A</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"set-a-default-statechangestrategy\">Set a default <code><a href=\"api/ng-observable/StateChangeStrategy\" class=\"code-anchor\">StateChangeStrategy</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ng-observable#set-a-default-statechangestrategy\"><i class=\"material-icons\">link</i></a></h4>\n<p>Add a default <code><a href=\"api/ng-observable/StateChangeStrategy\" class=\"code-anchor\">StateChangeStrategy</a></code> to your root component.</p>\n<code-example language=\"typescript\">\n@Component({\n    providers: [<a href=\"api/ng-observable/useStateChangeStrategy\" class=\"code-anchor\">useStateChangeStrategy</a>(<a href=\"api/ng-observable/StateChangeStrategy#DETACH\" class=\"code-anchor\">StateChangeStrategy.DETACH</a>)], // Or <a href=\"api/ng-observable/StateChangeStrategy#REATTACH\" class=\"code-anchor\">REATTACH</a> if using zones\n})\nexport class AppComponent {}\n</code-example>\n<h4 id=\"remove-zonejs\">Remove <code>zone.js</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ng-observable#remove-zonejs\"><i class=\"material-icons\">link</i></a></h4>\n<p>If any parts of your project or dependencies (such as <code>@angular/material</code>) rely on <code>zone.js</code> for change detection,\nskip this step.</p>\n<ol>\n<li>Remove the <code>zone.js</code> polyfill</li>\n</ol>\n<code-example language=\"typescript\">\n// polyfills.ts\n\nimport \"zone.js/dist/zone\" // &#x3C;-- Remove this line\n</code-example>\n<ol start=\"2\">\n<li>Configure <code>platformBrowserDynamic</code> to use <code>\"noop\"</code> zones:</li>\n</ol>\n<p>If using <code>Render3</code> from ivy beta, skip this step.</p>\n<code-example language=\"typescript\">\n// main.ts\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule, {\n        ngZone: \"noop\", // &#x3C;-- Add this line\n    })\n    .catch(err => console.error(err))\n</code-example>\n<h2 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ng-observable#example\"><i class=\"material-icons\">link</i></a></h2>\n<p>For the best experience, each component/directive should declare a <code>Props</code> and <code><a href=\"api/ng-observable/State\" class=\"code-anchor\">State</a></code> interface that describe the <code>@Input()</code> props and stateful variables of the class respectively. All template variables should be initialised with sensible defaults in the constructor to prevent undefined state.</p>\n<p>There is no explicit handling of subscriptions in this example. Everything is managed automatically by <code><a href=\"api/ng-observable/Stream\" class=\"code-anchor\">Stream</a></code>. Change detection is queued every time <code><a href=\"api/ng-observable/State\" class=\"code-anchor\">State</a></code> receives a signal via <code>state.next()</code>. Inputs are connected to the state via\n<code><a href=\"api/ng-observable/operators/mapInputsToState\" class=\"code-anchor\">mapInputsToState</a></code> to ensure that change detection runs when the input changes. Since everything is an observable, you can completely control\nwhat properties get updated and when change detection should run using operators to buffer or rate limit individual streams.</p>\n<p>The end result is a component that is fully described in terms of observable inputs and outputs.</p>\n<code-example language=\"typescript\">\nfunction setUser(source: Store&#x3C;AppState>) {\n    return source.pipe(\n        <a href=\"api/ng-observable/operators/select\" class=\"code-anchor\">select</a>(fromStore),\n        map(user => ({ user })),\n    )\n}\n\nfunction setCoords(source: Observable&#x3C;MouseEvent>) {\n    return source.pipe(map(coords => ({ coords })))\n}\n\nfunction setData&#x3C;T>(\n    source: SomeService,\n    title: Observable&#x3C;string>,\n): Observable&#x3C;{ user: User }> {\n    return title.pipe(\n        switchMap(ctx => source.getSomething(ctx)),\n        map(user => ({ user })),\n    )\n}\n\nfunction setModel(source: Observable&#x3C;Event>) {\n    return source.pipe(\n        ofEventTarget(HTMLInputElement),\n        map(event => ({\n            model: event.target.value,\n        })),\n    )\n}\n\nfunction getModel(source: Observable&#x3C;HelloProps>) {\n    return source.pipe(\n        <a href=\"api/ng-observable/operators/select\" class=\"code-anchor\">select</a>(ctx => ctx.title),\n        delay(1000),\n    )\n}\n\nfunction computeTitle() {\n    return (state: HelloState) => state.innerTitle + 123\n}\n\ninterface User {\n    name: string\n}\n\ninterface AppState {\n    user: User\n}\n\ninterface Coords {\n    screenX: number,\n    screenY: number\n}\n\ntype HelloProps = Pick&#x3C;HelloComponent, \"title\">\ntype HelloState = HelloProps &#x26; Pick&#x3C;HelloComponent, \"innerTitle\" | \"model\" | \"coords\" | \"user\">\n\nexport class HelloComponent extends <a href=\"api/ng-observable/NgObservable\" class=\"code-anchor\">NgObservable</a> implements HelloProps, HelloState {\n    @Input()\n    readonly title: string = \"\" // local props\n\n    @Output()\n    readonly btnClick = new <a href=\"api/ng-observable/InvokeSubject\" class=\"code-anchor\">InvokeSubject</a>&#x3C;MouseEvent>()\n\n    @<a href=\"api/ng-observable/Computed\" class=\"code-anchor\">Computed</a>&#x3C;string>(computeTitle)\n    readonly computedTitle: string = \"\" // computed state\n\n    @HostListener(\"mousemove\", [\"$event\"])\n    public mousemove = new <a href=\"api/ng-observable/InvokeSubject\" class=\"code-anchor\">InvokeSubject</a>&#x3C;MouseEvent>()\n\n    @HostListener(\"click\", [\"$event\"])\n    readonly hostClick = new <a href=\"api/ng-observable/InvokeSubject\" class=\"code-anchor\">InvokeSubject</a>&#x3C;MouseEvent>()\n\n    @ViewChild(\"buttonRef\", { static: true })\n    buttonRef: ElementRef&#x3C;HTMLButtonElement> | null = null\n\n    readonly modelChange = new <a href=\"api/ng-observable/InvokeSubject\" class=\"code-anchor\">InvokeSubject</a>&#x3C;Event>()\n    readonly innerTitle: string = \"\"\n    readonly model: string = \"test\" // local state\n    readonly coords: Coords | null = null // local state\n    readonly user: User | null = null // global state\n\n    constructor(\n        @Self() stateFactory: <a href=\"api/ng-observable/StateFactory\" class=\"code-anchor\">StateFactory</a>&#x3C;HelloState>,\n        @Self() stream: <a href=\"api/ng-observable/Stream\" class=\"code-anchor\">Stream</a>,\n        someService: SomeService,\n        store: Store&#x3C;AppState>,\n    ) {\n        super()\n        const state = stateFactory.create(this)\n        const { hostClick, modelChange, mousemove } = this\n\n        stream(state.patchValue)(setCoords(mousemove)) // set the value of coords without triggering change detection\n\n        stream(state)(\n            setInnerTitle(<a href=\"api/ng-observable/operators/mapInputsToState\" class=\"code-anchor\">mapInputsToState</a>(this)), // map props to state\n            setUser(store), // <a href=\"api/ng-observable/operators/select\" class=\"code-anchor\">select</a> user from store\n            mapTo({})(hostClick), // trigger change detection when clicked without modifying state\n            setData(someService, getModel(state)), // get data from someService whenever model changes\n            setModel(modelChange), // set the model whenever it changes\n        )\n\n        // Create lifecycle hook observables\n        <a href=\"api/ng-observable/operators/ngOnInit\" class=\"code-anchor\">ngOnInit</a>(this).subscribe(() => {\n            // will be defined in <a href=\"api/ng-observable/operators/ngOnInit\" class=\"code-anchor\">ngOnInit</a> because of static resolution\n            console.log(this.buttonRef)\n        })\n    }\n\n    // Or decorate class methods. Important: Do not override base lifecycle methods. Rename or remove them instead.\n    @<a href=\"api/ng-observable/NgOnChanges\" class=\"code-anchor\">NgOnChanges</a>()\n    public runOnChanges(changes: <a href=\"api/ng-observable/TypedChanges\" class=\"code-anchor\">TypedChanges</a>&#x3C;HelloProps>) {\n        // runs during OnChanges hook\n        if (changes.title) {\n            console.log(changes.title.currentValue) // typed to \"string\"\n        }\n    }\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - start\n-->\n<!-- links from this doc:\n - api/ng-observable/Computed\n - api/ng-observable/InvokeSubject\n - api/ng-observable/NgObservable\n - api/ng-observable/NgOnChanges\n - api/ng-observable/State\n - api/ng-observable/State#next\n - api/ng-observable/StateChangeStrategy\n - api/ng-observable/StateChangeStrategy#DETACH\n - api/ng-observable/StateChangeStrategy#REATTACH\n - api/ng-observable/StateFactory\n - api/ng-observable/Stream\n - api/ng-observable/TypedChanges\n - api/ng-observable/operators/mapInputsToState\n - api/ng-observable/operators/ngOnChanges\n - api/ng-observable/operators/ngOnInit\n - api/ng-observable/operators/select\n - api/ng-observable/useStateChangeStrategy\n - guide/ng-observable#configure-state-optional\n - guide/ng-observable#example\n - guide/ng-observable#ngobservable\n - guide/ng-observable#remove-zonejs\n - guide/ng-observable#set-a-default-statechangestrategy\n - guide/ng-observable#setup\n - https://github.com/zodiac-team/zodiac-ui/edit/master/apps/docs/content/guide/ng-observable.md?message=docs%3A%20describe%20your%20change...\n-->"
}